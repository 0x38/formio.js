[
  {
    "name": "Webform#showErrors",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 863,
        "line": "  /**"
      },
      {
        "lineNumber": 864,
        "line": "   * Show the errors of this form within the alert dialog."
      },
      {
        "lineNumber": 865,
        "line": "   *"
      },
      {
        "lineNumber": 866,
        "line": "   * @param {Object} error - An optional additional error to display along with the component errors."
      },
      {
        "lineNumber": 867,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 868,
        "line": "   */"
      },
      {
        "lineNumber": 869,
        "line": "  showErrors(error, triggerEvent) {"
      }
    ],
    "codeParams": [
      "error",
      "triggerEvent"
    ],
    "docParams": [
      "error"
    ]
  },
  {
    "name": "Webform#onChange",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 945,
        "line": "  /**"
      },
      {
        "lineNumber": 946,
        "line": "   * Trigger the change event for this form."
      },
      {
        "lineNumber": 947,
        "line": "   *"
      },
      {
        "lineNumber": 948,
        "line": "   * @param changed"
      },
      {
        "lineNumber": 949,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 950,
        "line": "   */"
      },
      {
        "lineNumber": 951,
        "line": "  onChange(flags, changed) {"
      }
    ],
    "codeParams": [
      "flags",
      "changed"
    ],
    "docParams": [
      "changed",
      "flags"
    ]
  },
  {
    "name": "Webform#submit",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1064,
        "line": "  /**"
      },
      {
        "lineNumber": 1065,
        "line": "   * Submits the form."
      },
      {
        "lineNumber": 1066,
        "line": "   *"
      },
      {
        "lineNumber": 1067,
        "line": "   * @example"
      },
      {
        "lineNumber": 1068,
        "line": "   * import Webform from 'formiojs/Webform';"
      },
      {
        "lineNumber": 1069,
        "line": "   * let form = new Webform(document.getElementById('formio'));"
      },
      {
        "lineNumber": 1070,
        "line": "   * form.src = 'https://examples.form.io/example';"
      },
      {
        "lineNumber": 1071,
        "line": "   * form.submission = {data: {"
      },
      {
        "lineNumber": 1072,
        "line": "   *   firstName: 'Joe',"
      },
      {
        "lineNumber": 1073,
        "line": "   *   lastName: 'Smith',"
      },
      {
        "lineNumber": 1074,
        "line": "   *   email: 'joe@example.com'"
      },
      {
        "lineNumber": 1075,
        "line": "   * }};"
      },
      {
        "lineNumber": 1076,
        "line": "   * form.submit().then((submission) => {"
      },
      {
        "lineNumber": 1077,
        "line": "   *   console.log(submission);"
      },
      {
        "lineNumber": 1078,
        "line": "   * });"
      },
      {
        "lineNumber": 1079,
        "line": "   *"
      },
      {
        "lineNumber": 1080,
        "line": "   * @param {boolean} before - If this submission occured from the before handlers."
      },
      {
        "lineNumber": 1081,
        "line": "   *"
      },
      {
        "lineNumber": 1082,
        "line": "   * @returns {Promise} - A promise when the form is done submitting."
      },
      {
        "lineNumber": 1083,
        "line": "   */"
      },
      {
        "lineNumber": 1084,
        "line": "  submit(before, options) {"
      }
    ],
    "codeParams": [
      "before",
      "options"
    ],
    "docParams": [
      "before"
    ]
  },
  {
    "name": "BaseComponent#createTooltip",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1237,
        "line": "  /**"
      },
      {
        "lineNumber": 1238,
        "line": "   * Create the HTML element for the tooltip of this component."
      },
      {
        "lineNumber": 1239,
        "line": "   * @param {HTMLElement} container - The containing element that will contain this tooltip."
      },
      {
        "lineNumber": 1240,
        "line": "   */"
      },
      {
        "lineNumber": 1241,
        "line": "  createTooltip(container, component, classes) {"
      }
    ],
    "codeParams": [
      "container",
      "component",
      "classes"
    ],
    "docParams": [
      "container"
    ]
  },
  {
    "name": "BaseComponent#appendChild",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1510,
        "line": "  /**"
      },
      {
        "lineNumber": 1511,
        "line": "   * Append different types of children."
      },
      {
        "lineNumber": 1512,
        "line": "   *"
      },
      {
        "lineNumber": 1513,
        "line": "   * @param child"
      },
      {
        "lineNumber": 1514,
        "line": "   */"
      },
      {
        "lineNumber": 1515,
        "line": "  appendChild(element, child) {"
      }
    ],
    "codeParams": [
      "element",
      "child"
    ],
    "docParams": [
      "child"
    ]
  },
  {
    "name": "BaseComponent#ce",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1529,
        "line": "  /**"
      },
      {
        "lineNumber": 1530,
        "line": "   * Alias for document.createElement."
      },
      {
        "lineNumber": 1531,
        "line": "   *"
      },
      {
        "lineNumber": 1532,
        "line": "   * @param {string} type - The type of element to create"
      },
      {
        "lineNumber": 1533,
        "line": "   * @param {Object} attr - The element attributes to add to the created element."
      },
      {
        "lineNumber": 1534,
        "line": "   * @param {Various} children - Child elements. Can be a DOM Element, string or array of both."
      },
      {
        "lineNumber": 1535,
        "line": "   * @param {Object} events"
      },
      {
        "lineNumber": 1536,
        "line": "   *"
      },
      {
        "lineNumber": 1537,
        "line": "   * @return {HTMLElement} - The created element."
      },
      {
        "lineNumber": 1538,
        "line": "   */"
      },
      {
        "lineNumber": 1539,
        "line": "  ce(type, attr, children = null) {"
      }
    ],
    "codeParams": [
      "type",
      "attr",
      "children"
    ],
    "docParams": [
      "type",
      "attr",
      "children",
      "events"
    ]
  },
  {
    "name": "BaseComponent#addInput",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 1945,
        "line": "  /**"
      },
      {
        "lineNumber": 1946,
        "line": "   * Add a new input to this comonent."
      },
      {
        "lineNumber": 1947,
        "line": "   *"
      },
      {
        "lineNumber": 1948,
        "line": "   * @param input"
      },
      {
        "lineNumber": 1949,
        "line": "   * @param container"
      },
      {
        "lineNumber": 1950,
        "line": "   * @param noSet"
      },
      {
        "lineNumber": 1951,
        "line": "   */"
      },
      {
        "lineNumber": 1952,
        "line": "  addInput(input, container) {"
      }
    ],
    "codeParams": [
      "input",
      "container"
    ],
    "docParams": [
      "input",
      "container",
      "noSet"
    ]
  },
  {
    "name": "BaseComponent#updateValue",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2216,
        "line": "  /**"
      },
      {
        "lineNumber": 2217,
        "line": "   * Update a value of this component."
      },
      {
        "lineNumber": 2218,
        "line": "   *"
      },
      {
        "lineNumber": 2219,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 2220,
        "line": "   */"
      },
      {
        "lineNumber": 2221,
        "line": "  updateValue(flags, value) {"
      }
    ],
    "codeParams": [
      "flags",
      "value"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "BaseComponent#calculateValue",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2257,
        "line": "  /**"
      },
      {
        "lineNumber": 2258,
        "line": "   * Perform a calculated value operation."
      },
      {
        "lineNumber": 2259,
        "line": "   *"
      },
      {
        "lineNumber": 2260,
        "line": "   * @param data - The global data object."
      },
      {
        "lineNumber": 2261,
        "line": "   *"
      },
      {
        "lineNumber": 2262,
        "line": "   * @return {boolean} - If the value changed during calculation."
      },
      {
        "lineNumber": 2263,
        "line": "   */"
      },
      {
        "lineNumber": 2264,
        "line": "  calculateValue(data, flags) {"
      }
    ],
    "codeParams": [
      "data",
      "flags"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "BaseComponent#invalidMessage",
    "filePath": "src/components/base/Base.js",
    "lines": [
      {
        "lineNumber": 2305,
        "line": "  /**"
      },
      {
        "lineNumber": 2306,
        "line": "   * Returns the invalid message, or empty string if the component is valid."
      },
      {
        "lineNumber": 2307,
        "line": "   *"
      },
      {
        "lineNumber": 2308,
        "line": "   * @param data"
      },
      {
        "lineNumber": 2309,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 2310,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 2311,
        "line": "   */"
      },
      {
        "lineNumber": 2312,
        "line": "  invalidMessage(data, dirty, ignoreCondition) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "ignoreCondition"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "NestedComponent#createComponent",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 131,
        "line": "  /**"
      },
      {
        "lineNumber": 132,
        "line": "   * Create a new component and add it to the components array."
      },
      {
        "lineNumber": 133,
        "line": "   *"
      },
      {
        "lineNumber": 134,
        "line": "   * @param component"
      },
      {
        "lineNumber": 135,
        "line": "   * @param data"
      },
      {
        "lineNumber": 136,
        "line": "   */"
      },
      {
        "lineNumber": 137,
        "line": "  createComponent(component, options, data, before) {"
      }
    ],
    "codeParams": [
      "component",
      "options",
      "data",
      "before"
    ],
    "docParams": [
      "component",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponent",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 168,
        "line": "  /**"
      },
      {
        "lineNumber": 169,
        "line": "   * Add a new component to the components array."
      },
      {
        "lineNumber": 170,
        "line": "   *"
      },
      {
        "lineNumber": 171,
        "line": "   * @param {Object} component - The component JSON schema to add."
      },
      {
        "lineNumber": 172,
        "line": "   * @param {HTMLElement} element - The DOM element to append this child to."
      },
      {
        "lineNumber": 173,
        "line": "   * @param {Object} data - The submission data object to house the data for this component."
      },
      {
        "lineNumber": 174,
        "line": "   * @param {HTMLElement} before - A DOM element to insert this element before."
      },
      {
        "lineNumber": 175,
        "line": "   * @return {BaseComponent} - The created component instance."
      },
      {
        "lineNumber": 176,
        "line": "   */"
      },
      {
        "lineNumber": 177,
        "line": "  addComponent(component, element, data, before, noAdd) {"
      }
    ],
    "codeParams": [
      "component",
      "element",
      "data",
      "before",
      "noAdd"
    ],
    "docParams": [
      "component",
      "element",
      "data",
      "before"
    ]
  },
  {
    "name": "NestedComponent#addComponents",
    "filePath": "src/components/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 264,
        "line": "  /**"
      },
      {
        "lineNumber": 265,
        "line": "   *"
      },
      {
        "lineNumber": 266,
        "line": "   * @param element"
      },
      {
        "lineNumber": 267,
        "line": "   * @param data"
      },
      {
        "lineNumber": 268,
        "line": "   */"
      },
      {
        "lineNumber": 269,
        "line": "  addComponents(element, data, options) {"
      }
    ],
    "codeParams": [
      "element",
      "data",
      "options"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "SelectComponent#addOption",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 141,
        "line": "  /**"
      },
      {
        "lineNumber": 142,
        "line": "   * Adds an option to the select dropdown."
      },
      {
        "lineNumber": 143,
        "line": "   *"
      },
      {
        "lineNumber": 144,
        "line": "   * @param value"
      },
      {
        "lineNumber": 145,
        "line": "   * @param label"
      },
      {
        "lineNumber": 146,
        "line": "   */"
      },
      {
        "lineNumber": 147,
        "line": "  addOption(value, label, attr) {"
      }
    ],
    "codeParams": [
      "value",
      "label",
      "attr"
    ],
    "docParams": [
      "value",
      "label"
    ]
  },
  {
    "name": "evaluate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 28,
        "line": "/**"
      },
      {
        "lineNumber": 29,
        "line": " * Evaluate a method."
      },
      {
        "lineNumber": 30,
        "line": " *"
      },
      {
        "lineNumber": 31,
        "line": " * @param func"
      },
      {
        "lineNumber": 32,
        "line": " * @param args"
      },
      {
        "lineNumber": 33,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 34,
        "line": " */"
      },
      {
        "lineNumber": 35,
        "line": "export function evaluate(func, args, ret, tokenize) {"
      }
    ],
    "codeParams": [
      "func",
      "args",
      "ret",
      "tokenize"
    ],
    "docParams": [
      "func",
      "args"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 279,
        "line": "/**"
      },
      {
        "lineNumber": 280,
        "line": " * Get a component by its key"
      },
      {
        "lineNumber": 281,
        "line": " *"
      },
      {
        "lineNumber": 282,
        "line": " * @param {Object} components"
      },
      {
        "lineNumber": 283,
        "line": " *   The components to iterate."
      },
      {
        "lineNumber": 284,
        "line": " * @param {String|Object} key"
      },
      {
        "lineNumber": 285,
        "line": " *   The key of the component to get, or a query of the component to search."
      },
      {
        "lineNumber": 286,
        "line": " *"
      },
      {
        "lineNumber": 287,
        "line": " * @returns {Object}"
      },
      {
        "lineNumber": 288,
        "line": " *   The component that matches the given key, or undefined if not found."
      },
      {
        "lineNumber": 289,
        "line": " */"
      },
      {
        "lineNumber": 290,
        "line": "export function getComponent(components, key, includeAll) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "checkCalculated",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 410,
        "line": "/**"
      },
      {
        "lineNumber": 411,
        "line": " * Checks the calculated value for a provided component and data."
      },
      {
        "lineNumber": 412,
        "line": " *"
      },
      {
        "lineNumber": 413,
        "line": " * @param {Object} component"
      },
      {
        "lineNumber": 414,
        "line": " *   The component to check for the calculated value."
      },
      {
        "lineNumber": 415,
        "line": " * @param {Object} submission"
      },
      {
        "lineNumber": 416,
        "line": " *   A submission object."
      },
      {
        "lineNumber": 417,
        "line": " * @param data"
      },
      {
        "lineNumber": 418,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 419,
        "line": " */"
      },
      {
        "lineNumber": 420,
        "line": "export function checkCalculated(component, submission, rowData) {"
      }
    ],
    "codeParams": [
      "component",
      "submission",
      "rowData"
    ],
    "docParams": [
      "component",
      "submission",
      "data"
    ]
  },
  {
    "name": "checkSimpleConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 433,
        "line": "/**"
      },
      {
        "lineNumber": 434,
        "line": " * Check if a simple conditional evaluates to true."
      },
      {
        "lineNumber": 435,
        "line": " *"
      },
      {
        "lineNumber": 436,
        "line": " * @param condition"
      },
      {
        "lineNumber": 437,
        "line": " * @param condition"
      },
      {
        "lineNumber": 438,
        "line": " * @param row"
      },
      {
        "lineNumber": 439,
        "line": " * @param data"
      },
      {
        "lineNumber": 440,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 441,
        "line": " */"
      },
      {
        "lineNumber": 442,
        "line": "export function checkSimpleConditional(component, condition, row, data) {"
      }
    ],
    "codeParams": [
      "component",
      "condition",
      "row",
      "data"
    ],
    "docParams": [
      "condition",
      "condition",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCustomConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 471,
        "line": "/**"
      },
      {
        "lineNumber": 472,
        "line": " * Check custom javascript conditional."
      },
      {
        "lineNumber": 473,
        "line": " *"
      },
      {
        "lineNumber": 474,
        "line": " * @param component"
      },
      {
        "lineNumber": 475,
        "line": " * @param custom"
      },
      {
        "lineNumber": 476,
        "line": " * @param row"
      },
      {
        "lineNumber": 477,
        "line": " * @param data"
      },
      {
        "lineNumber": 478,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 479,
        "line": " */"
      },
      {
        "lineNumber": 480,
        "line": "export function checkCustomConditional(component, custom, row, data, form, variable, onError, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "custom",
      "row",
      "data",
      "form",
      "variable",
      "onError",
      "instance"
    ],
    "docParams": [
      "component",
      "custom",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCondition",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 508,
        "line": "/**"
      },
      {
        "lineNumber": 509,
        "line": " * Checks the conditions for a provided component and data."
      },
      {
        "lineNumber": 510,
        "line": " *"
      },
      {
        "lineNumber": 511,
        "line": " * @param component"
      },
      {
        "lineNumber": 512,
        "line": " *   The component to check for the condition."
      },
      {
        "lineNumber": 513,
        "line": " * @param row"
      },
      {
        "lineNumber": 514,
        "line": " *   The data within a row"
      },
      {
        "lineNumber": 515,
        "line": " * @param data"
      },
      {
        "lineNumber": 516,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 517,
        "line": " *"
      },
      {
        "lineNumber": 518,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 519,
        "line": " */"
      },
      {
        "lineNumber": 520,
        "line": "export function checkCondition(component, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "row",
      "data"
    ]
  },
  {
    "name": "checkTrigger",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 535,
        "line": "/**"
      },
      {
        "lineNumber": 536,
        "line": " * Test a trigger on a component."
      },
      {
        "lineNumber": 537,
        "line": " *"
      },
      {
        "lineNumber": 538,
        "line": " * @param component"
      },
      {
        "lineNumber": 539,
        "line": " * @param action"
      },
      {
        "lineNumber": 540,
        "line": " * @param data"
      },
      {
        "lineNumber": 541,
        "line": " * @param row"
      },
      {
        "lineNumber": 542,
        "line": " * @returns {mixed}"
      },
      {
        "lineNumber": 543,
        "line": " */"
      },
      {
        "lineNumber": 544,
        "line": "export function checkTrigger(component, trigger, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "trigger",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "action",
      "data",
      "row"
    ]
  },
  {
    "name": "delay",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 1075,
        "line": "/**"
      },
      {
        "lineNumber": 1076,
        "line": " * Delays function execution with possibility to execute function synchronously or cancel it."
      },
      {
        "lineNumber": 1077,
        "line": " *"
      },
      {
        "lineNumber": 1078,
        "line": " * @param fn Function to delay"
      },
      {
        "lineNumber": 1079,
        "line": " * @param delay Delay time"
      },
      {
        "lineNumber": 1080,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 1081,
        "line": " */"
      },
      {
        "lineNumber": 1082,
        "line": "export function delay(fn, delay = 0, ...args) {"
      }
    ],
    "codeParams": [
      "fn",
      "delay",
      "args"
    ],
    "docParams": [
      "fn",
      "delay"
    ]
  }
]